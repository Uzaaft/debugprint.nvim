*debugprint.nvim.txt*          For NVIM v0.8.0         Last change: 2024-07-10

==============================================================================
Table of Contents                          *debugprint.nvim-table-of-contents*

1. Overview                                         |debugprint.nvim-overview|
2. Features                                         |debugprint.nvim-features|
3. Demo                                                 |debugprint.nvim-demo|
4. Installation                                 |debugprint.nvim-installation|
5. Keymappings and Commands         |debugprint.nvim-keymappings-and-commands|
6. Mapping Deprecation                   |debugprint.nvim-mapping-deprecation|
7. Other Options                               |debugprint.nvim-other-options|
  - Customizing Counter Logic      |debugprint.nvim-customizing-counter-logic|
8. Add Custom Filetypes                 |debugprint.nvim-add-custom-filetypes|
9. Feature Comparison with Similar Plugins|debugprint.nvim-feature-comparison-with-similar-plugins|
10. Links                                              |debugprint.nvim-links|

==============================================================================
1. Overview                                         *debugprint.nvim-overview*

`debugprint` is a NeoVim plugin that simplifies debugging for those who prefer
a low-tech approach. Instead of using a sophisticated debugger like nvim-dap
<https://github.com/mfussenegger/nvim-dap>, some people prefer using a 'print'
statement to trace the output during execution. With `debugprint`, you can
insert 'print' statements, with debug information pre-populated, relevant to
the language you’re editing. These statements include reference information
for quick output navigation and the ability to output variable values.

`debugprint` supports 30 filetypes/programming languages out-of-the-box,
including Python, JavaScript/TypeScript, Java, C/C++ and more. See
|debugprint.nvim-the-comparison-table| for the full list. It can also be
extended to support other languages.


==============================================================================
2. Features                                         *debugprint.nvim-features*

`debugprint` is inspired by vim-debugstring
<https://github.com/bergercookie/vim-debugstring>, but is updated and refreshed
for the NeoVim generation. It has these features:

- It includes reference information in each 'print line' such as file names, line
    numbers, a monotonic counter (which can be customized), and snippets of other
    lines to make it easier to cross-reference them in output.
- It can output the value of variables (or in some cases, expressions).
- It dot-repeats <https://jovicailic.org/2018/03/vim-the-dot-command/>.
- It can detect a variable name under the cursor if it’s a supported
    Treesitter-based language, or will prompt for the variable name with a sensible
    default if not.
- It knows which filetype you are working with when embedded inside another
    filetype, e.g. JavaScript-in-HTML, using Treesitter magic.
- It provides keymappings for visual and operator-pending modes, so you can
    select variables visually and using motions respectively.
- It provides commands to delete all debugging lines added to the current buffer
    as well as comment/uncomment those lines.
- It can optionally move to the inserted line (or not).
- You can add support for languages it doesn’t support out of the box.
- It’s MIT Licensed <LICENSE.txt>.


==============================================================================
3. Demo                                                 *debugprint.nvim-demo*



==============================================================================
4. Installation                                 *debugprint.nvim-installation*

**Requires NeoVim 0.9+.**

Example for `lazy.nvim` <https://github.com/folke/lazy.nvim>:

>lua
    return {
        "andrewferrier/debugprint.nvim",
        opts = { … },
        dependencies = {
            "echasnovski/mini.nvim" -- Needed for :ToggleCommentDebugPrints (not needed for NeoVim 0.10+)
        },
    }
<

Example for `packer.nvim` <https://github.com/wbthomason/packer.nvim>:

>lua
    packer.startup(function(use)
        …
        use({
            "andrewferrier/debugprint.nvim",
            config = function()
                opts = { … }
                require("debugprint").setup(opts)
            end,
            requires = {
                "echasnovski/mini.nvim" -- Needed for :ToggleCommentDebugPrints (not needed for NeoVim 0.10+)
            }
        })
        …
    end)
<

The sections below detail the allowed options that can appear in the `opts`
object.

Please subscribe to this GitHub issue
<https://github.com/andrewferrier/debugprint.nvim/issues/25> to be notified of
any breaking changes to `debugprint`.


==============================================================================
5. Keymappings and Commands         *debugprint.nvim-keymappings-and-commands*

By default, the plugin will create some keymappings and commands for use 'out
of the box'. There are also some function invocations which are not mapped to
any keymappings or commands by default, but could be. This is all shown in the
following table.

  --------------------------------------------------------------------------------------
  Mode         Default Key / Cmd           Purpose                         Above/Below
                                                                           Line
  ------------ --------------------------- ------------------------------- -------------
  Normal       g?p                         Plain debug                     Below

  Normal       g?P                         Plain debug                     Above

  Normal       g?v                         Variable debug                  Below

  Normal       g?V                         Variable debug                  Above

  Normal       None                        Variable debug (always prompt   Below
                                           for variable)                   

  Normal       None                        Variable debug (always prompt   Above
                                           for variable)                   

  Normal       None                        Delete debug lines in buffer    -

  Normal       None                        Comment/uncomment debug lines   -
                                           in buffer                       

  Visual       g?v                         Variable debug                  Below

  Visual       g?V                         Variable debug                  Above

  Op-pending   g?o                         Variable debug                  Below

  Op-pending   g?O                         Variable debug                  Above

  Command      :DeleteDebugPrints          Delete debug lines in buffer    -

  Command      :ToggleCommentDebugPrints   Comment/uncomment debug lines   -
                                           in buffer                       
  --------------------------------------------------------------------------------------
The keys and commands outlined above can be specifically overridden using the
`keymaps` and `commands` objects inside the `opts` object used above during
configuration of debugprint. For example, if configuring via `lazy.nvim`, it
might look like this:

>lua
    return {
        "andrewferrier/debugprint.nvim",
        opts = {
            keymaps = {
                normal = {
                    plain_below = "g?p",
                    plain_above = "g?P",
                    variable_below = "g?v",
                    variable_above = "g?V",
                    variable_below_alwaysprompt = nil,
                    variable_above_alwaysprompt = nil,
                    textobj_below = "g?o",
                    textobj_above = "g?O",
                    toggle_comment_debug_prints = nil,
                    delete_debug_prints = nil,
                },
                visual = {
                    variable_below = "g?v",
                    variable_above = "g?V",
                },
            },
            commands = {
                toggle_comment_debug_prints = "ToggleCommentDebugPrints",
                delete_debug_prints = "DeleteDebugPrints",
            },
        },
        -- The 'keys' and 'cmds' sections of this configuration are only needed if
        -- you want to take advantage of `lazy.nvim` lazy-loading - and you are
        -- *NOT* using lazy.nvim 0.11+, where they are enabled by default for the
        -- default keys and commands.
        keys = {
            { "g?", mode = 'n' },
            { "g?", mode = 'x' },
        },
        cmd = {
            "ToggleCommentDebugPrints",
            "DeleteDebugPrints",
        },
    }
<

You only need to include the keys / commands which you wish to override, others
will default as shown above. Setting any key or command to `nil` will skip it.

The default keymappings are chosen specifically because ordinarily in NeoVim
they are used to convert sections to ROT-13, which most folks don’t use.


==============================================================================
6. Mapping Deprecation                   *debugprint.nvim-mapping-deprecation*

_Note_: as of version 2.0.0, the old mechanism of configuring keymaps/commands
which specifically allowed for mapping directly to
`require('debugprint').debugprint(...)` is no longer officially supported or
documented. This is primarily because of confusion which arose over how to do
this mapping. Existing mappings performed this way are likely to continue to
work for some time. You should, however, migrate over to the new method
outlined above. If this doesn’t give you the flexibility to map how you wish
for some reason, please open an issue
<https://github.com/andrewferrier/debugprint.nvim/issues/new>.


==============================================================================
7. Other Options                               *debugprint.nvim-other-options*

`debugprint` supports the following options in its global `opts` object:

  ------------------------------------------------------------------------------------------
  Option              Default      Purpose
  ------------------- ------------ ---------------------------------------------------------
  move_to_debugline   false        When adding a debug line, moves the cursor to that line

  display_counter     true         Whether to display/include the increasing integer counter
                                   in each debug message. Can also be set to a function to
                                   customize, see below

  display_snippet     true         Whether to include a snippet of the line above/below in
                                   plain debug lines

  filetypes           See below    Custom filetypes - see below

  print_tag           DEBUGPRINT   The string inserted into each print statement, which can
                                   be used to uniquely identify statements inserted by
                                   debugprint.
  ------------------------------------------------------------------------------------------

CUSTOMIZING COUNTER LOGIC          *debugprint.nvim-customizing-counter-logic*

`display_counter` can also be set to a custom callback function to implement
custom counter logic. In this case you are responsible for implementing your
own counter. For example, this logic will implement essentially the same as the
default counter:

>lua
    local counter = 0
    
    local counter_func = function()
        counter = counter + 1
        return '[' .. tostring(counter) .. ']'
    end
    
    debugprint.setup({display_counter = counter_func})
<


==============================================================================
8. Add Custom Filetypes                 *debugprint.nvim-add-custom-filetypes*

_Note: If you work out a configuration for a filetype not supported
out-of-the-box, it would be appreciated if you can open an issue to have it
supported out-of-the-box in debugprint so others can benefit. Similarly, if you
spot any issues with, or improvements to, the language configurations
out-of-the-box, please open an issue also._

If `debugprint` doesn’t support your filetype, you can add it as a custom
filetype in one of two ways:

- In the `opts.filetypes` object in `setup()`.
- Using the `require('debugprint').add_custom_filetypes()` method (designed for
    use from `ftplugin/` directories, etc.

In either case, the format is the same. For example, if adding via `setup()`:

>lua
    local my_fileformat = {
        left = 'print "',
        left_var = 'print "', -- `left_var` is optional, for 'variable' lines only; `left` will be used if it's not present
        right = '"',
        mid_var = "${",
        right_var = '}"',
    }
    
    require('debugprint').setup({ filetypes = { ["filetype"] = my_fileformat, ["another_filetype"] = another_of_my_fileformats, ... }})
<

or `add_custom_filetypes()`:

>lua
    require('debugprint').add_custom_filetypes({ my_fileformat, ... })
<

Your new file format will be _merged_ in with those that already exist. If you
pass in one that already exists, your configuration will override the built-in
configuration.

The keys in the configuration are used like this:

  ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  Debug line Default keys      How debug line is constructed
  type                         
  ---------- ----------------- -------------------------------------------------------------------------------------------------------------------------------------------------------
  Plain      g?p/g?P           my_fileformat.left .. "auto-gen DEBUG string" .. my_fileformat.right
  debug line                   

  Variable   g?v/g?V/g?o/g?O   my_fileformat.left_var (or my_fileformat.left) .. "auto-gen DEBUG string, variable=" .. my_file_format.mid_var .. variable .. my_fileformat.right_var
  debug line                   
  ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
If it helps to understand these, you can look at the built-in configurations in
filetypes.lua <lua/debugprint/filetypes.lua>.


==============================================================================
9. Feature Comparison with Similar Plugins*debugprint.nvim-feature-comparison-with-similar-plugins*

(This table is quite wide, you may need to scroll horizontally)

  ---------------------------------------------------------------------------------------------------------------------
  Feature                 debugprint.nvim   nvim-chainsaw   printer.nvim   refactoring.nvim   vim-printer   logsitter
  ----------------------- ----------------- --------------- -------------- ------------------ ------------- -----------
  Auto-generation of      :+1:              :x:             :+1:           :+1:               :x:           :+1:
  debug line,                                                                                               
  incl. locator info                                                                                        

  Print plain debug lines :+1:              :+1:            :x:            :+1:               :x:           :x:

  Print variables using   :+1:              :+1:            :x:            :x:                :+1:          :x:
  current word/heuristic                                                                                    

  Print variables using   :+1:              :+1:            :x:            :+1:               :x:           :x:
  treesitter                                                                                                

  Print                   :+1:              :x:             :x:            :x:                :x:           :x:
  variables/expressions                                                                                     
  using prompts                                                                                             

  Print variables using   :+1:              :x:             :+1:           :x:                :x:           :x:
  motions                                                                                                   

  Print variables using   :+1:              :+1:            :+1:           :+1:               :+1:          :x:
  visual mode                                                                                               

  Print assertions        :x:               :+1:            :x:            :x:                :x:           :x:

  Print stack traces      :x:               :+1:            :x:            :x:                :x:           :x:

  Add time-tracking logic :x:               :+1:            :x:            :x:                :x:           :x:

  Add debugging           :x:               :+1:            :x:            :x:                :x:           :x:
  breakpoints                                                                                               

  Print debug lines       :+1:              :x:             (via global    :x:                :+1:          :x:
  above/below current                                       config)                                         
  line                                                                                                      

  Supports dot-repeat     :+1:              :+1:            :x:            :x:                :x:           :x:

  Can control whether to  :+1:              :x:             :x:            :x:                :x:           :x:
  move to inserted lines                                                                                    

  Clean up all debug      :+1:              :+1:            :x:            :x:                :x:           :x:
  lines                                                                                                     

  Comment/uncomment all   :+1:              :x:             :x:            :x:                :x:           :x:
  debug lines                                                                                               

  Can put debugprint text :x:               :x:             :+1:           :x:                :x:           :x:
  into default register                                                                                     

  Built-in support for:   -                 -               -              -                  -             -

  AppleScript             :+1:              :+1:            :x:            :x:                :x:           :x:

  bash/sh                 :+1:              :+1:            :+1:           :x:                :+1:          :x:

  C                       :+1:              :x:             :x:            :x:                :x:           :x:

  C#                      :+1:              :x:             :x:            :x:                :x:           :x:

  C++                     :+1:              :x:             :+1:           :+1:               :+1:          :x:

  CMake                   :+1:              :x:             :x:            :x:                :x:           :x:

  dart                    :+1:              :x:             :x:            :x:                :x:           :x:

  Docker                  :+1:              :x:             :x:            :x:                :x:           :x:

  DOS/Windows Batch       :+1:              :x:             :x:            :x:                :x:           :x:

  Elixir                  :+1:              :x:             :x:            :x:                :x:           :x:

  fish                    :+1:              :x:             :x:            :x:                :x:           :x:

  Fortran                 :+1:              :x:             :x:            :x:                :+1:          :x:

  Golang                  :+1:              :x:             :+1:           :+1:               :+1:          :+1:

  Haskell                 :+1:              :x:             :x:            :x:                :x:           :x:

  Java                    :+1:              :x:             :+1:           :+1:               :+1:          :x:

  Javascript/Typescript   :+1:              :+1:            :+1:           :+1:               :+1:          :+1:

  Kotlin                  :+1:              :x:             :x:            :x:                :x:           :x:

  lean                    :+1:              :x:             :x:            :x:                :x:           :x:

  lua                     :+1:              :+1:            :+1:           :+1:               :+1:          :+1:

  GNU Make                :+1:              :x:             :x:            :x:                :x:           :x:

  Perl                    :+1:              :x:             :x:            :x:                :x:           :x:

  PHP                     :+1:              :x:             :x:            :+1:               :x:           :x:

  Powershell/ps1          :+1:              :x:             :x:            :x:                :x:           :x:

  Python                  :+1:              :+1:            :+1:           :+1:               :+1:          :x:

  R                       :+1:              :x:             :x:            :x:                :x:           :x:

  Ruby                    :+1:              :+1:            :x:            :+1:               :x:           :x:

  Rust                    :+1:              :+1:            :+1:           :x:                :+1:          :x:

  Swift                   :+1:              :x:             :x:            :x:                :x:           :x:

  VimL (vimscript)        :+1:              :x:             :+1:           :x:                :+1:          :x:

  zsh                     :+1:              :x:             :+1:           :x:                :+1:          :x:

  Add custom filetypes    :+1:              :+1:            :+1:           :x:                :x:           :+1:
  (doced/supported)                                                                                         

  Customizable callback   :x:               :x:             :+1:           :x:                :x:           :x:
  formatter                                                                                                 

  Implemented in          Lua               Lua             Lua            Lua                VimL          Lua
  ---------------------------------------------------------------------------------------------------------------------
Other unmaintained plugins (last updated more than 3 years ago):

- vim-debugstring <https://github.com/bergercookie/vim-debugstring>
- vim-printf <https://github.com/mptre/vim-printf>

==============================================================================
10. Links                                              *debugprint.nvim-links*

1. *Test status*: https://github.com/andrewferrier/debugprint.nvim/actions/workflows/tests.yaml/badge.svg

Generated by panvimdoc <https://github.com/kdheepak/panvimdoc>

vim:tw=78:ts=8:noet:ft=help:norl:
