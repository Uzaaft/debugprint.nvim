*debugprint.nvim.txt*          For NVIM v0.8.0         Last change: 2024-08-10

==============================================================================
Table of Contents                          *debugprint.nvim-table-of-contents*

1. Overview                                         |debugprint.nvim-overview|
2. Features                                         |debugprint.nvim-features|
3. Demo                                                 |debugprint.nvim-demo|
4. Installation                                 |debugprint.nvim-installation|
5. Links                                               |debugprint.nvim-links|

==============================================================================
1. Overview                                         *debugprint.nvim-overview*

`debugprint` is a NeoVim plugin that simplifies debugging for those who prefer
a low-tech approach. Instead of using a sophisticated debugger like nvim-dap
<https://github.com/mfussenegger/nvim-dap>, some people prefer using a 'print'
statement to trace the output during execution. With `debugprint`, you can
insert 'print' statements, with debug information pre-populated, relevant to
the language you’re editing. These statements include reference information
for quick output navigation and the ability to output variable values.

`debugprint` supports 30 filetypes/programming languages out-of-the-box,
including Python, JavaScript/TypeScript, Java, C/C++ and more. See
|debugprint.nvim-the-comparison-table| for the full list. It can also be
extended to support other languages.


==============================================================================
2. Features                                         *debugprint.nvim-features*

`debugprint` is inspired by vim-debugstring
<https://github.com/bergercookie/vim-debugstring>, but is updated and refreshed
for the NeoVim generation. It has these features:

- It includes reference information in each 'print line' such as file names, line
    numbers, a monotonic counter (which can be customized), and snippets of other
    lines to make it easier to cross-reference them in output.
- It can output the value of variables (or in some cases, expressions).
- It dot-repeats <https://jovicailic.org/2018/03/vim-the-dot-command/>.
- It can detect a variable name under the cursor if it’s a supported
    Treesitter-based language, or will prompt for the variable name with a sensible
    default if not.
- It knows which filetype you are working with when embedded inside another
    filetype, e.g. JavaScript-in-HTML, using Treesitter magic.
- It provides keymappings for visual and operator-pending modes, so you can
    select variables visually and using motions respectively.
- It provides commands to delete all debugging lines added to the current buffer
    as well as comment/uncomment those lines.
- It can optionally move to the inserted line (or not).
- You can add support for languages it doesn’t support out of the box.
- It’s MIT Licensed <LICENSE.txt>.


==============================================================================
3. Demo                                                 *debugprint.nvim-demo*



==============================================================================
4. Installation                                 *debugprint.nvim-installation*

**Requires NeoVim 0.9+.**

Example for `lazy.nvim` <https://github.com/folke/lazy.nvim>:

>lua
    return {
        "andrewferrier/debugprint.nvim",
    
        -- opts = { … },
    
        dependencies = {
            "echasnovski/mini.nvim" -- Needed for :ToggleCommentDebugPrints (not needed for NeoVim 0.10+)
        },
    
        -- The 'keys' and 'cmds' sections of this configuration are optional and only needed if
        -- you want to take advantage of `lazy.nvim` lazy-loading. If you decide to
        -- customize the keys/commands (see below), you'll need to change these too.
        --
        -- keys = {
        --     { "g?", mode = 'n' },
        --     { "g?", mode = 'x' },
        -- },
        -- cmd = {
        --     "ToggleCommentDebugPrints",
        --     "DeleteDebugPrints",
        -- },
    }
<

Example for `packer.nvim` <https://github.com/wbthomason/packer.nvim>:

>lua
    packer.startup(function(use)
        …
        use({
            "andrewferrier/debugprint.nvim",
            config = function()
                opts = { … }
                require("debugprint").setup(opts)
            end,
            requires = {
                "echasnovski/mini.nvim" -- Needed for :ToggleCommentDebugPrints (not needed for NeoVim 0.10+)
            }
        })
        …
    end)
<

The sections below detail the allowed options that can appear in the `opts`
object.

==============================================================================
5. Links                                               *debugprint.nvim-links*

1. *Test status*: https://github.com/andrewferrier/debugprint.nvim/actions/workflows/tests.yaml/badge.svg

Generated by panvimdoc <https://github.com/kdheepak/panvimdoc>

vim:tw=78:ts=8:noet:ft=help:norl:
